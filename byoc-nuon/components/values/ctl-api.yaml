---
env:
  ENV: prod
  GIT_REF: dne # TODO: update
  MIDDLEWARES: log,error,public_metrics,public,timeout,size,global,auth,org,offset_pagination,invites,headers,cors,config
  RUNNER_MIDDLEWARES: log,runner_metrics,error,public,timeout,size,auth,runner_org,offset_pagination,headers,cors,config
  INTERNAL_MIDDLEWARES: log,headers,internal_metrics,error,public,timeout,size,global,config,admin,offset_pagination

  DB_HOST: "{{ .nuon.components.rds_cluster_nuon.outputs.address }}"
  DB_NAME: "ctl_api"      # hardcoded, for now - also, main db not the desired db we created
  DB_USER: "ctl_api"      # hardcoded, for now - also, main user, not the user we create
  # DB_NAME: "nuonadmin" # hardcoded, for now - also, main db not the desired db we created
  # DB_USER: "nuon"      # hardcoded, for now - also, main user, not the user we create
  DB_USE_SSL: "true"
  DB_SSL_MODE: verify-full
  DB_USE_ZAP: "true"
  DB_USE_IAM: "true"
  DB_MIGRATIONS_PATH: /migrations
  DB_REGION: "{{ .nuon.install_stack.outputs.region }}"  # NOTE(fd): this assumes the db and deployment are in the same region

  AUTH0_ISSUER_URL: "{{ .nuon.inputs.inputs.auth_issuer_url }}"
  AUTH0_AUDIENCE: "{{ .nuon.inputs.inputs.auth_audience }}"
  TEMPORAL_MAX_CONCURRENT_ACTIVITIES: !!string 100
  TEMPORAL_STICKY_WORKFLOW_CACHE_SIZE: !!string 10000

  CLICKHOUSE_DB_PORT: !!string 9000
  CLICKHOUSE_DB_USE_TLS: "false"
  CLICKHOUSE_DB_HOST: "{{ .nuon.components.clickhouse_cluster.outputs.service }}"
  CLICKHOUSE_DB_NAME: "ctl_api"
  CLICKHOUSE_DB_USER: clickhouse

  HTTP_PORT: !!string 8081
  INTERNAL_HTTP_PORT: !!string 8082
  RUNNER_HTTP_PORT: !!string 8083
  GRACEFUL_SHUTDOWN_TIMEOUT: 10s
  RUNNER_CONTAINER_IMAGE_TAG: latest

  GITHUB_APP_ID: !!string {{ .nuon.inputs.inputs.github_app_id }}

  INTEGRATION_GITHUB_INSTALL_ID: !!string 00000000

  # TODO: may need to be renamed to scope to this component
  AUTH0_CLIENT_ID: !!string "{{ .nuon.inputs.inputs.auth_client_id_ctl_api }}"

  INTERNAL_SLACK_WEBHOOK_URL: |-
    https://hooks.slack.com/services/xxxxxxxxxxx/xxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxxxxxx

  AWS_CLOUDFORMATION_STACK_TEMPLATE_BUCKET: "{{ .nuon.components.s3_buckets.outputs.install_template_bucket.arn}}"
  AWS_CLOUDFORMATION_STACK_TEMPLATE_BASE_URL: "{{ .nuon.components.s3_buckets.outputs.install_template_bucket.arn}}"

  APP_URL: https://app.{{ .nuon.sandbox.outputs.nuon_dns.public_domain.name }}
  PUBLIC_API_URL: https://api.{{ .nuon.sandbox.outputs.nuon_dns.public_domain.name }}
  RUNNER_API_URL: https://runner.{{ .nuon.sandbox.outputs.nuon_dns.public_domain.name }}
  ADMIN_API_URL: https://admin.{{ .nuon.sandbox.outputs.nuon_dns.internal_domain.name }}

  # TODO: sort out tailscale for the ui and admin api
  TEMPORAL_HOST: temporal-frontend-headless.temporal.svc.cluster.local:7233
  TEMPORAL_MAX_CONCURRENT_ACTIVITIES: !!string 3500
  TEMPORAL_STICKY_WORKFLOW_CACHE_SIZE: !!string 10
  TEMPORAL_UI_URL: http://temporal-ui.{{ .nuon.install_stack.outputs.region }}.{{ .nuon.sandbox.outputs.nuon_dns.internal_domain.name }}:8080

  SANDBOX_MODE_SLEEP: 1s

  # NOTE: deprecated or not in use in byoc
  SEGMENT_WRITE_KEY: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  LOOPS_API_KEY: "this key does not exist"

  # NOTE: from management component (mostly)
  MANAGEMENT_ACCOUNT_ID: "{{ .nuon.components.management.outputs.management_account_id }}"
  MANAGEMENT_ECR_REGISTRY_ARN: "arn:aws:ecr:{{ .nuon.install_stack.outputs.region }}:{{ .nuon.install_stack.outputs.account_id }}:repository"
  MANAGEMENT_ECR_REGISTRY_ID: "{{ .nuon.components.management.outputs.ecr.id }}"
  MANAGEMENT_IAM_ROLE_ARN: "{{ .nuon.components.management.outputs.org_access_role.iam_role_arn }}"

  DNS_MANAGEMENT_IAM_ROLE_ARN: "{{ .nuon.components.management.outputs.dns_management_role_arn }}"
  DNS_ROOT_DOMAIN: "{{ .nuon.components.management.outputs.route53_zone.domain }}"
  DNS_ZONE_ID: "{{ .nuon.components.management.outputs.route53_zone.zone_id }}"

  ORG_RUNNER_K8S_CA_DATA: "{{ .nuon.components.management.outputs.cluster.certificate_authority_data }}"
  ORG_RUNNER_K8S_CLUSTER_ID: "{{ .nuon.components.management.outputs.cluster.name }}"
  ORG_RUNNER_K8S_IAM_ROLE_ARN: "{{ .nuon.components.ctl_api_role.outputs.iam_role_arn }}"
  ORG_RUNNER_K8S_PUBLIC_ENDPOINT: "{{ .nuon.components.management.outputs.cluster.endpoint }}"
  ORG_RUNNER_OIDC_PROVIDER_ARN: "{{ .nuon.components.management.outputs.cluster.oidc_provider_arn }}"
  ORG_RUNNER_OIDC_PROVIDER_URL: "{{ .nuon.components.management.outputs.cluster.oidc_provider }}" # TODO: rename to drop the URL
  ORG_RUNNER_REGION: "{{ .nuon.install_stack.outputs.region }}"
  ORG_RUNNER_K8S_USE_DEFAULT_CREDS: !!string true

  # TODO: determine
  ORG_RUNNER_SUPPORT_ROLE_ARN: "arn:aws:iam::814326426574:role/nuon-internal-support-prod"
  RUNNER_DEFAULT_SUPPORT_IAM_ROLE_ARN: "arn:aws:iam::814326426574:role/nuon-internal-support-prod"

envSecrets:
  - name: "GITHUB_APP_KEY"
    valueFrom:
      name: github-app-key
      key: value
  - name: "CLICKHOUSE_DB_PASSWORD"
    valueFrom:
      name: clickhouse-cluster-pw
      key: value

image:
  repository: "{{ .nuon.components.img_nuon_ctl_api.outputs.image.repository }}"
  tag: "{{ .nuon.components.img_nuon_ctl_api.outputs.image.tag }}"

worker:
  minDomains: 3
  instances:
    - namespace: orgs
      minReplicas: 2
      maxReplicas: 10
      command: ["/bin/service", "worker", "--namespace=orgs"]
    - namespace: actions
      minReplicas: 2
      maxReplicas: 10
      command: ["/bin/service", "worker", "--namespace=actions"]
    - namespace: apps
      minReplicas: 2
      maxReplicas: 5
      command: ["/bin/service", "worker", "--namespace=apps"]
    - namespace: components
      minReplicas: 2
      maxReplicas: 5
      command: ["/bin/service", "worker", "--namespace=components"]
    - namespace: installs
      minReplicas: 2
      maxReplicas: 10
      command: ["/bin/service", "worker", "--namespace=installs"]
    - namespace: releases
      minReplicas: 2
      maxReplicas: 5
      command: ["/bin/service", "worker", "--namespace=releases"]
    - namespace: general
      minReplicas: 2
      maxReplicas: 5
      command: ["/bin/service", "worker", "--namespace=general"]
    - namespace: runners
      minReplicas: 2
      maxReplicas: 10
      command: ["/bin/service", "worker", "--namespace=runners"]
  autoscaling:
    targetCPUUtilizationPercentage: 90
    targetMemoryUtilizationPercentage: 65
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  # topology spread
  minDomains: 2
  # default values for a nodepool. used by the api to create a custom nodepool
  nodepool:
    capacity_types:
      - on-demand
    # docs: https://karpenter.sh/v0.37/reference/instance-types/#t3amedium
    instance_types:
      - t3a.xlarge
  zones:
    - us-west-2a
    - us-west-2b

api:
  liveness_probe: /livez
  readiness_probe: /readyz

  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  public:
    port: 8081
    domain: "api.{{ .nuon.sandbox.outputs.nuon_dns.public_domain.name }}"
    domain_certificate: "{{ .nuon.components.certificate_wildcard_public.outputs.public_domain_certificate_arn }}"
    autoscaling:
      minReplicas: 4
      maxReplicas: 10
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
  admin:
    port: 8082
    domain: "admin.{{ .nuon.sandbox.outputs.nuon_dns.internal_domain.name }}"
    autoscaling:
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
  runner:
    port: 8083
    domain: "runner.{{ .nuon.sandbox.outputs.nuon_dns.public_domain.name }}"
    domain_certificate: "{{ .nuon.components.certificate_wildcard_public.outputs.public_domain_certificate_arn }}"
    autoscaling:
      minReplicas: 4
      maxReplicas: 10
      targetCPUUtilizationPercentage: 35
      targetMemoryUtilizationPercentage: 40

  # topology spread
  minDomains: 2

  # TODO: these should actually match the zones the Nuon RDS Cluster is in to reduce latencey
  zones:
    - "{{ .nuon.install_stack.outputs.region }}a"
    - "{{ .nuon.install_stack.outputs.region }}b"
    - "{{ .nuon.install_stack.outputs.region }}c"

serviceAccount:
  name: ctl-api
  annotations:
    eks.amazonaws.com/role-arn: "{{ .nuon.components.ctl_api_role.outputs.iam_role_arn }}"
